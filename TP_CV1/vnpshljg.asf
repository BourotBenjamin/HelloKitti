#include <opencv2/core/core.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char** argv)
{

	Mat image;
	image = imread("img.jpg", CV_LOAD_IMAGE_COLOR);   // Read the file
	std::vector<cv::Mat> channels(3);
	cv::split(image, channels);
	//imshow("R", channels[0]);
	//imshow("G", channels[1]);
	//imshow("B", channels[2]);
	Mat grey;
	cv::cvtColor(image, grey, CV_BGR2GRAY);
	//cvThreshold(&image, &out, 255, 100, 0);
	//imshow("Grey", grey);
	imshow("Display window", image);                   // Show our image inside it.

	Mat t = grey > 100;
	//imshow("T", t);
	std::vector<Mat> channels_t;
	char name = 'a';
	for (auto c = channels.begin(); c != channels.end(); ++c)
	{
		channels_t.push_back((*c > 100));
		name++;
		//imshow(""+name, (*c > 100));
	}
	Mat merge_t;
	merge(channels_t, merge_t);
	//imshow("Merge", merge_t);
	Mat hsv;
	cvtColor(image, hsv, CV_BGR2HSV);
	std::vector<Mat> hsv_channels(3);
	split(hsv, hsv_channels);
	//imshow("H0", hsv_channels[0]);
	//imshow("H1", hsv_channels[1]);
	//imshow("H2", hsv_channels[2]);
	hsv_channels[1] *= 2;
	Mat merge_h, merge_h2;
	merge(hsv_channels, merge_h);
	cvtColor(merge_h, merge_h, CV_HSV2BGR);
	imshow("Merge H", merge_h);
	//hsv_channels[1] /= 2;
	cv::Mat mask = (hsv_channels[0]>30) & (hsv_channels[0]<90);
	hsv_channels[1] = hsv_channels[1] & mask;
	merge(hsv_channels, merge_h2);
	cvtColor(merge_h2, merge_h2, CV_HSV2BGR);
	imshow("Merge H2", merge_h2);
	cvtColor(hsv, hsv, CV_HSV2BGR);
	imshow("HSV", hsv);

	waitKey(0);                                          // Wait for a keystroke in the window
	return 0;
}